[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[project]
name = 'LoopStructural'
description = '3D geological modelling'
authors = [{ name = 'Lachlan Grose', email = 'lachlan.grose@monash.edu' }]
readme = 'README.md'
requires-python = '>=3.8'
keywords = [
    "earth sciences",
    "geology",
    "3-D modelling",
    "structural geology",
    "uncertainty",

]
license = { text = 'MIT' }
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Information Analysis',
    'License :: OSI Approved :: MIT License',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: MacOS',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
dependencies = [
    "numpy>=1.18",
    "pandas",
    "scipy",
    "scikit-image",
    "scikit-learn",
    "tqdm",
]
dynamic = ['version']

[project.optional-dependencies]
all = ['loopstructural[visualisation,inequalities,export]']
visualisation = [
    "matplotlib",
    "pyvista",
    "loopstructuralviusualisation>0.1.4"
    ]
export = [
    "geoh5py", 
    "pyevtk", 
    "dill"]
jupyter = [
    "pyvista[all]",
    "tqdm"
    ]
inequalities = [
"loopsolver"]
docs = ["pyvista[all]", "pydata-sphinx-theme","meshio","loopstructuralvisualisation[all]","networkx","scikit-learn","scikit-image","sphinx","sphinx-gallery","geoh5py","geopandas","sphinxcontrib-bibtex","myst-parser"]
[project.urls]
Documentation = 'https://Loop3d.org/LoopStructural/'
"Bug Tracker" = 'https://github.com/loop3d/loopstructural/issues'
"Source Code" = 'https://github.com/loop3d/loopstructural'

[tool.setuptools.dynamic]
version = { attr = 'LoopStructural.version.__version__' }

[tool.setuptools.packages.find]
include = ['LoopStructural', 'LoopStructural.*']

[tool.setuptools.package-data]
LoopStructural = [
    "datasets/data/fault_trace/*",
    "datasets/data/*.csv",
    "datasets/data/*.txt",
    "datasets/data/geological_map_data/*.csv",
    "datasets/data/geological_map_data/*.txt",
]

[tool.isort]
profile = 'black'
line_length = 100
# Sort by name, don't cluster "from" vs "import"
force_sort_within_sections = true
# Combines "as" imports on the same line
combine_as_imports = true

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ['py39']
exclude = '\.eggs|\.git|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist|node_modules'

[tool.blackdoc]
# From https://numpydoc.readthedocs.io/en/latest/format.html
# Extended discussion: https://github.com/pyvista/pyvista/pull/4129
# The length of docstring lines should be kept to 75 characters to facilitate
# reading the docstrings in text terminals.
line-length = 75

[tool.build_sphinx]
source-dir = 'doc'
build-dir = './doc/build'
all_files = 1

[tool.upload_sphinx]
upload-dir = 'doc/build/html'

[tool.pydocstyle]
match = '(?!coverage).*.py'
convention = "numpy"
add-ignore = ["D404"]

[tool.codespell]
skip = '*.pyc,*.txt,*.gif,*.png,*.jpg,*.ply,*.vtk,*.vti,*.vtu,*.js,*.html,*.doctree,*.ttf,*.woff,*.woff2,*.eot,*.mp4,*.inv,*.pickle,*.ipynb,flycheck*,./.git/*,./.hypothesis/*,*.yml,doc/_build/*,./doc/images/*,./dist/*,*~,.hypothesis*,./doc/examples/*,*.mypy_cache/*,*cover,./tests/tinypages/_build/*,*/_autosummary/*'
quiet-level = 3


[tool.ruff]
exclude = ['.git', 'pycache__', 'build', 'dist', 'doc/examples', 'doc/_build']
line-length = 100
indent-width = 4
target-version = 'py39'

[tool.ruff.lint]
external = ["E131", "D102", "D105"]

ignore = [
    # whitespace before ':'
    "E203",
    # line break before binary operator
    # "W503",
    # line length too long
    "E501",
    # do not assign a lambda expression, use a def
    "E731",
    # too many leading '#' for block comment
    "E266",
    # ambiguous variable name
    "E741",
    # module level import not at top of file
    "E402",
    # Quotes (temporary)
    "Q0",
    # bare excepts (temporary)
    # "B001", "E722",
    "E722",
    # we already check black
    # "BLK100",
    # 'from module import *' used; unable to detect undefined names
    "F403",
]
fixable = ["ALL"]
unfixable = []
extend-select = ["B007", "B010", "C4", "F", "NPY", "PGH004", "RSE", "RUF100"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
