
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/4_advanced/plot_model_from_geological_map.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_4_advanced_plot_model_from_geological_map.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_4_advanced_plot_model_from_geological_map.py:


4.a Building a model using the ProcessInputData
===============================================
There is a disconnect between the input data required by 3D modelling software and a geological map.
In LoopStructural the geological model is a collection of implicit functions that can be mapped to
the distribution of stratigraphic units and the location of fault surfaces. Each implicit function
is approximated from the observations of the stratigraphy, this requires grouping conformable geological
units together as a singla implicit function, mapping the different stratigraphic horizons to a value of
the implicit function and determining the relationship with geological structures such as faults.
In this tutorial the **ProcessInputData** class will be used to convert geologically meaningful datasets to input for LoopStructural.
The **ProcessInputData** class uses:
* stratigraphic contacts* stratigraphic orientations* stratigraphic thickness* stratigraphic order
To build a model of stratigraphic horizons and:* fault locations* fault orientations * fault properties* fault edges
To use incorporate faults into the geological model.

.. GENERATED FROM PYTHON SOURCE LINES 17-19

Imports
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 19-28

.. code-block:: Python



    from LoopStructural.modelling import ProcessInputData
    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import Loop3DView
    from LoopStructural.datasets import load_geological_map_data

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Read stratigraphy from csv
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 31-51

.. code-block:: Python


    (
        contacts,
        stratigraphic_orientations,
        stratigraphic_thickness,
        stratigraphic_order,
        bbox,
        fault_locations,
        fault_orientations,
        fault_properties,
        fault_edges,
    ) = load_geological_map_data()

    thicknesses = dict(
        zip(
            list(stratigraphic_thickness["name"]),
            list(stratigraphic_thickness["thickness"]),
        )
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-54

Stratigraphic Contacts
***********************

.. GENERATED FROM PYTHON SOURCE LINES 54-62

.. code-block:: Python



    contacts

    fig, ax = plt.subplots(1)
    ax.scatter(contacts["X"], contacts["Y"], c=contacts["name"].astype("category").cat.codes)
    ax.set_title("Contact data")




.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_001.png
   :alt: Contact data
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Contact data')



.. GENERATED FROM PYTHON SOURCE LINES 63-67

Stratigraphic orientations
~~~~~~~~~~~~~~~~~~~~~~~~~~
Stratigraphic orientations needs to have X, Y, Z and either azimuth and dip, dipdirection and dip, strike
and dip (RH thumb rule) or the vector components of the normal vector (nx, ny, nz)

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python


    stratigraphic_orientations






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>azimuth</th>
          <th>dip</th>
          <th>polarity</th>
          <th>formation</th>
          <th>source</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>535257.611616</td>
          <td>7.499030e+06</td>
          <td>516.933711</td>
          <td>360.000000</td>
          <td>40.000000</td>
          <td>1</td>
          <td>Jeerinah_Formation</td>
          <td>observed</td>
        </tr>
        <tr>
          <th>1</th>
          <td>548279.320612</td>
          <td>7.493304e+06</td>
          <td>547.201842</td>
          <td>190.000000</td>
          <td>50.000000</td>
          <td>1</td>
          <td>Jeerinah_Formation</td>
          <td>observed</td>
        </tr>
        <tr>
          <th>2</th>
          <td>548279.320612</td>
          <td>7.493304e+06</td>
          <td>547.201842</td>
          <td>190.000000</td>
          <td>55.000000</td>
          <td>1</td>
          <td>Jeerinah_Formation</td>
          <td>observed</td>
        </tr>
        <tr>
          <th>3</th>
          <td>541013.160392</td>
          <td>7.493387e+06</td>
          <td>540.217972</td>
          <td>150.000000</td>
          <td>28.000000</td>
          <td>1</td>
          <td>Bunjinah_Formation</td>
          <td>observed</td>
        </tr>
        <tr>
          <th>4</th>
          <td>536742.232168</td>
          <td>7.490698e+06</td>
          <td>500.982205</td>
          <td>110.000000</td>
          <td>28.000000</td>
          <td>1</td>
          <td>Bunjinah_Formation</td>
          <td>observed</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>201</th>
          <td>543123.310952</td>
          <td>7.491848e+06</td>
          <td>603.965999</td>
          <td>108.413106</td>
          <td>26.895259</td>
          <td>1</td>
          <td>Wittenoom_Formation</td>
          <td>contact_orientations</td>
        </tr>
        <tr>
          <th>202</th>
          <td>544238.128958</td>
          <td>7.492249e+06</td>
          <td>606.486202</td>
          <td>140.129808</td>
          <td>20.872559</td>
          <td>1</td>
          <td>Wittenoom_Formation</td>
          <td>contact_orientations</td>
        </tr>
        <tr>
          <th>203</th>
          <td>546356.500042</td>
          <td>7.493059e+06</td>
          <td>584.507590</td>
          <td>180.231910</td>
          <td>25.229506</td>
          <td>1</td>
          <td>Wittenoom_Formation</td>
          <td>contact_orientations</td>
        </tr>
        <tr>
          <th>204</th>
          <td>548354.744485</td>
          <td>7.492679e+06</td>
          <td>567.312965</td>
          <td>178.569396</td>
          <td>55.725098</td>
          <td>1</td>
          <td>Wittenoom_Formation</td>
          <td>contact_orientations</td>
        </tr>
        <tr>
          <th>205</th>
          <td>550574.233917</td>
          <td>7.493345e+06</td>
          <td>625.412651</td>
          <td>157.358988</td>
          <td>65.845552</td>
          <td>1</td>
          <td>Wittenoom_Formation</td>
          <td>contact_orientations</td>
        </tr>
      </tbody>
    </table>
    <p>206 rows Ã— 8 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 71-75

Stratigraphic thickness
~~~~~~~~~~~~~~~~~~~~~~~
Stratigraphic thickness should be a dictionary containing the unit name (which should be in the contacts table)
and the corresponding thickness of this unit.

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python


    thicknesses





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'Mount_McRae_Shale_and_Mount_Sylvia_Formation': 224.5, 'Marra_Mamba_Iron_Formation': 152.0, 'Boolgeeda_Iron_Formation': 166.5, 'Woongarra_Rhyolite': 389.0, 'Jeerinah_Formation': 600.0, 'Brockman_Iron_Formation': 557.0, 'Wittenoom_Formation': 236.0, 'Weeli_Wolli_Formation': 241.5, 'Turee_Creek_Group': 162.0, 'Fortescue_Group': 236.0, 'Bunjinah_Formation': 236.0, 'Pyradie_Formation': 236.0}



.. GENERATED FROM PYTHON SOURCE LINES 79-82

Bounding box
~~~~~~~~~~~~
* Origin - bottom left corner of the model # * Maximum - top right hand corner of the model

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: Python



    origin = bbox.loc["origin"].to_numpy()  # np.array(bbox[0].split(',')[1:],dtype=float)
    maximum = bbox.loc["maximum"].to_numpy()  # np.array(bbox[1].split(',')[1:],dtype=float)

    bbox






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>origin</th>
          <td>519572.569</td>
          <td>7489723.89</td>
          <td>-4800.0</td>
        </tr>
        <tr>
          <th>maximum</th>
          <td>551978.745</td>
          <td>7516341.01</td>
          <td>1200.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 90-94

Stratigraphic column
~~~~~~~~~~~~~~~~~~~~
The order of stratrigraphic units is defined a list of tuples containing the name of the group and the
order of units within the group. For example there are 7 units in the following example that form two groups.

.. GENERATED FROM PYTHON SOURCE LINES 94-105

.. code-block:: Python


    # example nested list
    [
        ("youngest_group", ["unit1", "unit2", "unit3", "unit4"]),
        ("older_group", ["unit5", "unit6", "unit7"]),
    ]

    stratigraphic_order

    order = [("supergroup_0", list(stratigraphic_order["unit name"]))]








.. GENERATED FROM PYTHON SOURCE LINES 106-110

Building a stratigraphic model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A ProcessInputData onject can be built from these datasets using the argument names.
A full list of possible arguments can be found in the documentation.

.. GENERATED FROM PYTHON SOURCE LINES 110-121

.. code-block:: Python



    processor = ProcessInputData(
        contacts=contacts,
        contact_orientations=stratigraphic_orientations.rename({"formation": "name"}, axis=1),
        thicknesses=thicknesses,
        stratigraphic_order=order,
        origin=origin,
        maximum=maximum,
    )
    processor.foliation_properties["supergroup_0"] = {"regularisation": 1.0}







.. GENERATED FROM PYTHON SOURCE LINES 122-123

The process input data can be used to directly build a geological model

.. GENERATED FROM PYTHON SOURCE LINES 123-127

.. code-block:: Python


    model = GeologicalModel.from_processor(processor)
    model.update()








.. GENERATED FROM PYTHON SOURCE LINES 128-129

Or build directly from the dataframe and processor attributes.

.. GENERATED FROM PYTHON SOURCE LINES 129-135

.. code-block:: Python


    model2 = GeologicalModel(processor.origin, processor.maximum)
    model2.data = processor.data
    model2.create_and_add_foliation("supergroup_0")
    model2.update()








.. GENERATED FROM PYTHON SOURCE LINES 136-138

Visualising model
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 138-144

.. code-block:: Python



    view = Loop3DView(model)
    view.plot_model_surfaces()
    view.display()




.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_002.png
   :alt: plot model from geological map
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-147

Adding faults
~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 147-177

.. code-block:: Python



    fault_orientations


    fault_edges


    fault_properties

    processor = ProcessInputData(
        contacts=contacts,
        contact_orientations=stratigraphic_orientations.rename({"formation": "name"}, axis=1),
        thicknesses=thicknesses,
        stratigraphic_order=order,
        origin=origin,
        maximum=maximum,
        fault_edges=fault_edges,
        fault_orientations=fault_orientations,
        fault_locations=fault_locations,
        fault_properties=fault_properties,
    )
    processor.foliation_properties['supergroup_0']['regularisation'] = 1.0
    model = GeologicalModel.from_processor(processor)
    model.update()

    view = Loop3DView(model)
    view.plot_model_surfaces()
    view.display()




.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_003.png
   :alt: plot model from geological map
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 178-180

Visualise stratigraphic column
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 180-184

.. code-block:: Python

    from LoopStructural.visualisation import StratigraphicColumnView

    scv = StratigraphicColumnView(model)
    scv.plot()



.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_004.png
   :alt: plot model from geological map
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_model_from_geological_map_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 200x1000 with 1 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 52.790 seconds)


.. _sphx_glr_download__auto_examples_4_advanced_plot_model_from_geological_map.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_model_from_geological_map.ipynb <plot_model_from_geological_map.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_model_from_geological_map.py <plot_model_from_geological_map.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_model_from_geological_map.zip <plot_model_from_geological_map.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
