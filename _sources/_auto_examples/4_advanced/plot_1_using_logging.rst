
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/4_advanced/plot_1_using_logging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_4_advanced_plot_1_using_logging.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_4_advanced_plot_1_using_logging.py:


1e. Using logging
===============================
LoopStructural has a number of levels of logging incorporated in the code to allow
for recording and debugging the models.
The python logging module allows for 5 levels of messages to be returned to the user:
1. Debug messages
2. Info messages
3. Warning messages
4. Error messages
5. Critical messages

LoopStructural uses all of these logging levels to report the various aspects of the model
building process.
Generally, the user only needs to be aware of the warning and error messages.

By default the warning, error and critical messages are returned to the console and will appear to
the user.
All messages except for debug are recorded to a file :code:`default-loop-structural-logfile.log`.

Lets have a look at the logging from the Claudius model.

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: Python


    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import Loop3DView
    from LoopStructural.datasets import load_claudius  # demo data
    from LoopStructural import log_to_file








.. GENERATED FROM PYTHON SOURCE LINES 30-32

Specify a log file
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python


    log_to_file("logging_demo_log.log")








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Create model
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 38-61

.. code-block:: Python

    data, bb = load_claudius()
    model = GeologicalModel(bb[0, :], bb[1, :])
    model.set_model_data(data)

    vals = [0, 60, 250, 330, 600]
    strat_column = {"strati": {}}
    for i in range(len(vals) - 1):
        strat_column["strati"]["unit_{}".format(i)] = {
            "min": vals[i],
            "max": vals[i + 1],
            "id": i,
        }
    model.set_stratigraphic_column(strat_column)
    strati = model.create_and_add_foliation(
        "strati",
        interpolatortype="FDI",  # try changing this to 'PLI'
        nelements=1e4,  # try changing between 1e3 and 5e4
        buffer=0.3,
        damp=True,
    )
    viewer = Loop3DView(model, background="white")
    viewer.plot_model_surfaces()
    viewer.display()



.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_1_using_logging_001.png
   :alt: plot 1 using logging
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_1_using_logging_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-67

Looking at the log file
~~~~~~~~~~~~~~~~~~~~~~~
Here are the first 10 lines of the log file.
Most operations in loopstructural are recorded and this will allow you to identify whether
an operation is not occuring as you would expect.

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: Python



    # with open('logging_demo_log.log') as inf:
    #     for line in islice(inf, 0, 11):
    #         print(line)









.. GENERATED FROM PYTHON SOURCE LINES 75-78

Logging to console
~~~~~~~~~~~~~~~~~~
It is also possible to change the logging level for the console log.

.. GENERATED FROM PYTHON SOURCE LINES 78-112

.. code-block:: Python


    from LoopStructural import log_to_console

    log_to_console("info")


    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import Loop3DView
    from LoopStructural.datasets import load_claudius  # demo data


    data, bb = load_claudius()
    model = GeologicalModel(bb[0, :], bb[1, :])
    model.set_model_data(data)

    vals = [0, 60, 250, 330, 600]
    strat_column = {"strati": {}}
    for i in range(len(vals) - 1):
        strat_column["strati"]["unit_{}".format(i)] = {
            "min": vals[i],
            "max": vals[i + 1],
            "id": i,
        }
    model.set_stratigraphic_column(strat_column)
    strati = model.create_and_add_foliation(
        "strati",
        interpolatortype="FDI",  # try changing this to 'PLI'
        nelements=1e4,  # try changing between 1e3 and 5e4
        buffer=0.3,
        damp=True,
    )
    viewer = Loop3DView(model, background="white")
    viewer.plot_model_surfaces()
    viewer.display()



.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_1_using_logging_002.png
   :alt: plot 1 using logging
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_1_using_logging_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.106 seconds)


.. _sphx_glr_download__auto_examples_4_advanced_plot_1_using_logging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_using_logging.ipynb <plot_1_using_logging.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_using_logging.py <plot_1_using_logging.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_1_using_logging.zip <plot_1_using_logging.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
