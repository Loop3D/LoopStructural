
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/4_advanced/plot_2_local_weights.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_4_advanced_plot_2_local_weights.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_4_advanced_plot_2_local_weights.py:


============================
1f. Local data weighting
============================
LoopStructural primarily uses discrete interpolation methods (e.g. finite differences on a regular grid,
or linear/quadratic on tetrahedral meshes). The interpolation is determined by combining a regularisation
term and the data weights. The default behaviour is for every data point to be weighted equally, however
it is also possible to vary these weights per datapoint.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python


    from LoopStructural import GeologicalModel
    from LoopStructural.datasets import load_claudius
    from LoopStructural.visualisation import Loop3DView








.. GENERATED FROM PYTHON SOURCE LINES 17-20

Use Cladius case study
~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 20-22

.. code-block:: Python

    data, bb = load_claudius()
    data.head()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Unnamed: 0</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>val</th>
          <th>feature_name</th>
          <th>nx</th>
          <th>ny</th>
          <th>nz</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>550551.810547</td>
          <td>7.821922e+06</td>
          <td>-9734.299805</td>
          <td>250.0</td>
          <td>strati</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>550551.810547</td>
          <td>7.821903e+06</td>
          <td>-9731.809570</td>
          <td>250.0</td>
          <td>strati</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>2</td>
          <td>550551.810547</td>
          <td>7.821884e+06</td>
          <td>-9730.330078</td>
          <td>250.0</td>
          <td>strati</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>3</td>
          <td>550551.810547</td>
          <td>7.821865e+06</td>
          <td>-9729.330078</td>
          <td>250.0</td>
          <td>strati</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>4</td>
          <td>550551.810547</td>
          <td>7.821847e+06</td>
          <td>-9729.679688</td>
          <td>250.0</td>
          <td>strati</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 23-26

Build model with constant weighting
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Build model with weight 1.0 for the control points (cpw) and gradient normal constraints (npw)

.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: Python

    model = GeologicalModel(bb[0, :], bb[1, :])
    model.data = data
    model.create_and_add_foliation(
        "strati", nelements=10_000, interpolatortype="FDI", cpw=1.0, npw=1.0, regularisation=1.0
    )
    view = Loop3DView(model)
    view.plot_surface(model["strati"], value=data["val"].dropna().unique())
    view.display()



.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_001.png
   :alt: plot 2 local weights
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 35-36

Change weights to

.. GENERATED FROM PYTHON SOURCE LINES 36-44

.. code-block:: Python


    model = GeologicalModel(bb[0, :], bb[1, :])
    model.data = data
    model.create_and_add_foliation("strati", interpolatortype="FDI", cpw=10.0, npw=1.0,regularisation=1.)
    view = Loop3DView(model)
    view.plot_surface(model["strati"], value=data["val"].dropna().unique())
    view.display()




.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_002.png
   :alt: plot 2 local weights
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 45-49

Locally vary weights
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add a weight column to the dataframe and decrease the weighting of the points
in the North of the model.

.. GENERATED FROM PYTHON SOURCE LINES 49-60

.. code-block:: Python

    data, bb = load_claudius()
    data["w"] = 1.0
    data.loc[data["Y"] > (bb[1, 1] - bb[0, 1]) * 0.2 + bb[0, 1], "w"] = 0.01
    data.sample(10)
    model = GeologicalModel(bb[0, :], bb[1, :])
    model.data = data
    # cpw/npw are multipliers for the weight column
    model.create_and_add_foliation("strati", cpw=1.0, npw=1, regularisation=1.0)
    view = Loop3DView(model)
    view.plot_surface(model["strati"], value=data["val"].dropna().unique())
    view.display()



.. image-sg:: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_003.png
   :alt: plot 2 local weights
   :srcset: /_auto_examples/4_advanced/images/sphx_glr_plot_2_local_weights_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 7.886 seconds)


.. _sphx_glr_download__auto_examples_4_advanced_plot_2_local_weights.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_local_weights.ipynb <plot_2_local_weights.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_local_weights.py <plot_2_local_weights.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_2_local_weights.zip <plot_2_local_weights.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
