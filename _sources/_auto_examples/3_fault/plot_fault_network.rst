
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/3_fault/plot_fault_network.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_3_fault_plot_fault_network.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_3_fault_plot_fault_network.py:


3b. Modelling a fault network in LoopStructural
===============================================
Uses GeologicalModel, ProcessInputData and Loop3DView from LoopStructural library.
Also using geopandas to read a shapefile, pandas, matplotlib and numpy.

.. GENERATED FROM PYTHON SOURCE LINES 6-20

.. code-block:: Python


    import LoopStructural

    LoopStructural.__version__

    from LoopStructural import GeologicalModel
    from LoopStructural.modelling import ProcessInputData
    from LoopStructural.visualisation import Loop3DView
    from LoopStructural.datasets import load_fault_trace
    from LoopStructural.utils import rng
    import pandas as pd
    import matplotlib.pyplot as plt
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Read shapefile
~~~~~~~~~~~~~~
Read the shapefile and create a point for each node of the line

.. GENERATED FROM PYTHON SOURCE LINES 24-42

.. code-block:: Python

    fault_trace = load_fault_trace()
    faults = []
    for i in range(len(fault_trace)):
        for x, y in zip(fault_trace.loc[i, :].geometry.xy[0], fault_trace.loc[i, :].geometry.xy[1]):
            faults.append(
                [fault_trace.loc[i, "fault_name"], x, y, rng.random() * 0.4]
            )  # better results if points aren't from a single plane
    df = pd.DataFrame(faults, columns=["fault_name", "X", "Y", "Z"])

    fig, ax = plt.subplots()
    ax.scatter(df["X"], df["Y"])
    ax.axis("square")

    scale = np.min([df["X"].max() - df["X"].min(), df["Y"].max() - df["Y"].min()])
    df["X"] /= scale
    df["Y"] /= scale





.. image-sg:: /_auto_examples/3_fault/images/sphx_glr_plot_fault_network_001.png
   :alt: plot fault network
   :srcset: /_auto_examples/3_fault/images/sphx_glr_plot_fault_network_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 43-46

Orientation data
~~~~~~~~~~~~~~~~
We can generate vertical dip data at the centre of the fault.

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: Python


    ori = []
    for f in df["fault_name"].unique():
        centre = df.loc[df["fault_name"] == f, ["X", "Y", "Z"]].mean().to_numpy().tolist()
        tangent = (
            df.loc[df["fault_name"] == f, ["X", "Y", "Z"]].to_numpy()[0, :]
            - df.loc[df["fault_name"] == f, ["X", "Y", "Z"]].to_numpy()[-1, :]
        )
        norm = tangent / np.linalg.norm(tangent)
        norm = norm.dot(np.array([[0, -1, 0], [1, 0, 0], [0, 0, 0]]))
        ori.append([f, *centre, *norm])  # .extend(centre.extend(norm.tolist())))
    # fault_orientations = pd.DataFrame([[
    ori = pd.DataFrame(ori, columns=["fault_name", "X", "Y", "Z", "gx", "gy", "gz"])








.. GENERATED FROM PYTHON SOURCE LINES 61-64

Model extent
~~~~~~~~~~~~
# Calculate the bounding box for the model using the extent of the shapefiles. We make the Z coordinate 10% of the maximum x/y length.

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: Python


    z = np.max([df["X"].max(), df["Y"].max()]) - np.min([df["X"].min(), df["Y"].min()])
    z *= 0.2
    origin = [df["X"].min() - z, df["Y"].min() - z, -z]
    maximum = [df["X"].max() + z, df["Y"].max() + z, z]










.. GENERATED FROM PYTHON SOURCE LINES 73-77

Modelling abutting faults
~~~~~~~~~~~~~~~~~~~~~~~~~
In this exampe we will use the same faults but specify the angle between the faults as :math:`40^\circ` which will change
the fault relationship to be abutting rather than splay.

.. GENERATED FROM PYTHON SOURCE LINES 77-95

.. code-block:: Python


    processor = ProcessInputData(
        fault_orientations=ori,
        fault_locations=df,
        origin=origin,
        maximum=maximum,
        fault_edges=[("fault_2", "fault_1")],
        fault_edge_properties=[{"angle": 40}],
    )

    model = GeologicalModel.from_processor(processor)

    view = Loop3DView(model)
    for f in model.faults:
        view.plot_surface(f, value=[0])  #
        view.plot_data(f[0])

    view.display()



.. image-sg:: /_auto_examples/3_fault/images/sphx_glr_plot_fault_network_002.png
   :alt: plot fault network
   :srcset: /_auto_examples/3_fault/images/sphx_glr_plot_fault_network_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.168 seconds)


.. _sphx_glr_download__auto_examples_3_fault_plot_fault_network.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fault_network.ipynb <plot_fault_network.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fault_network.py <plot_fault_network.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_fault_network.zip <plot_fault_network.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
