
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/1_basic/plot_3_model_visualisation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_1_basic_plot_3_model_visualisation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_1_basic_plot_3_model_visualisation.py:


1c. Visualising models
===============================
The following tutorial will demonstrate how to use the Loop structural visualisation module.
This module provides a wrapper for the lavavu model that is written by
Owen Kaluza.

Lavavu allows for interactive visualisation of 3D models within a jupyter
notebook environment.

.. GENERATED FROM PYTHON SOURCE LINES 15-19

Imports
~~~~~~~
Import the required objects from LoopStructural for visualisation and
model building

.. GENERATED FROM PYTHON SOURCE LINES 19-26

.. code-block:: Python


    from LoopStructural import GeologicalModel
    from LoopStructural.visualisation import Loop3DView

    from LoopStructural.datasets import load_claudius  # demo data









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Build the model
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 29-41

.. code-block:: Python

    data, bb = load_claudius()
    model = GeologicalModel(bb[0, :], bb[1, :])
    model.set_model_data(data)
    strati = model.create_and_add_foliation("strati",nelements=1e4)
    vals = [0, 60, 250, 330, 600]
    for i in range(len(vals) - 1):
        model.stratigraphic_column.add_unit(
            f"unit_{i}",
            thickness=vals[i + 1] - vals[i],
            id=i,
        )
    model.stratigraphic_column.group_mapping['Group_0'] = 'strati'







.. GENERATED FROM PYTHON SOURCE LINES 42-112

Visualising results
~~~~~~~~~~~~~~~~~~~

The Loop3DView is an LoopStructural class that provides easy 3D
plotting options for plotting data points and resulting implicit
functions.

the Loop3DView is a wrapper around the pyvista Plotter class. Allowing
any of the methods for the pyvista Plotter class to be used.

The implicit function can be visualised by looking at isosurfaces of the
scalar field.

.. code:: python

   viewer = Loop3DView()
   viewer.plot_surface(feature,**kwargs)

Where optional kwargs can be:

-  ``value`` specifying the number of regularly spaced isosurfaces
-  ``paint_with`` the geological feature to colour the surface with
-  ``cmap`` colour map for the colouring
-  ``normals`` to plot the normal vectors to the surface
-  ``name`` to give the surface
-  ``colour`` the colour of the surface
-  ``opacity`` the opacity of the surface
-  ``vmin`` minimum value of the colour map
-  ``vmax`` maximum value of the colour map
-  ``pyvista_kwargs`` -  other kwargs for passing directly to pyvista `Plotter.add_mesh`


Alternatively the scalar fields can be displayed on a rectangular cuboid.

.. code:: python

   viewer.plot_scalar_field(geological_feature, **kwargs)


Other possible kwargs are:

-  ``cmap`` colour map for the property
-  ``vmin`` minimum value of the colour map
-  ``vmax`` maximum value of the colour map
-  ``opacity`` the opacity of the block
-  ``pyvista_kwargs`` -  other kwargs for passing directly to pyvista `Plotter.add_mesh`

The input data for the model can be visualised by calling either:

.. code:: python

   viewer.plot_data(feature,**kwargs)

Where optional kwargs can be:
- ``value`` - whether to add value data
- ``vector`` - whether to add gradient data
- ``scale`` - scale of the gradient vectors
- ``pyvista_kwargs`` -  other kwargs for passing directly to pyvista `Plotter.add_mesh`

The gradient of a geological feature can be visualised by calling:

.. code:: python

   viewer.add_vector_field(feature, **kwargs)

Where the optional kwargs can be:
- ``scale`` - scale of the gradient vectors




.. GENERATED FROM PYTHON SOURCE LINES 112-133

.. code-block:: Python


    viewer = Loop3DView(model, background="white")

    # determine the number of unique surfaces in the model from
    # the input data and then calculate isosurfaces for this

    viewer.plot_surface(strati, value=vals, cmap="prism", paint_with=strati)
    viewer.display()
    viewer = Loop3DView(model, background="white")

    viewer.plot_scalar_field(strati, cmap="prism")
    viewer.display()
    viewer = Loop3DView(model, background="white")
    # print(viewer._build_stratigraphic_cmap(model))
    viewer.plot_block_model(cmap='tab20')
    viewer.display()
    viewer = Loop3DView(model, background="white")

    # Add the data addgrad/addvalue arguments are optional
    viewer.plot_data(strati, vector=True, value=True)
    viewer.display()  # to add an interactive display



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_001.png
          :alt: plot 3 model visualisation
          :srcset: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_002.png
          :alt: plot 3 model visualisation
          :srcset: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_003.png
          :alt: plot 3 model visualisation
          :srcset: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_003.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_004.png
          :alt: plot 3 model visualisation
          :srcset: /_auto_examples/1_basic/images/sphx_glr_plot_3_model_visualisation_004.png
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.015 seconds)


.. _sphx_glr_download__auto_examples_1_basic_plot_3_model_visualisation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3_model_visualisation.ipynb <plot_3_model_visualisation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3_model_visualisation.py <plot_3_model_visualisation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_3_model_visualisation.zip <plot_3_model_visualisation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
